George Lesica
Grad Student
Naive Bayes

Run the program as follows:

    $ julia naivebayes_example.jl

There are no outside libraries required, just Julia.

I created a type (like a struct) to hold the model data, including the training
bins and various other bits of meta data that might be useful (not all of it is
actually used for this project). An instance of this type is instantiated with
the training data and then used to classify test instances.

This is done by passing the model into the classification function as the first
parameter. This is more or less how you do OOP in Julia (which doesn't really
support traditional OOP).

Test instances with values outside the bounds of the training data are assumed
to be in bins with zero members. This is, in my opinion, the most logical way
to handle this problem, although I can't say whether is yields optimal results
in all cases, who knows.

Results:

    96% correct with 10 bins
    98% correct with 20 bins
    93% correct with 50 bins
    93% correct with 100 bins
